.NET Framework — это платформа для разработки, которая включает в себя различные библиотеки и компоненты, необходимые для создания и запуска приложений. Она состоит из Common Language Runtime (CLR), Framework Class Library (FCL) и других компонентов.

CLR (Common Language Runtime) — это виртуальная машина, обеспечивающая выполнение кода и управление памятью. FCL/BCL (Framework Class Library/Base Class Library) — это набор классов и методов для выполнения общих задач. CLI (Common Language Infrastructure) — это спецификация, которая описывает среду выполнения и обеспечивает совместимость между языками. IL (Intermediate Language) — это промежуточный язык, на который компилируется код.

JIT-компилятор (Just-In-Time Compiler) компилирует IL-код в машинный код непосредственно перед его выполнением, что позволяет оптимизировать производительность.

CTS (Common Type System) определяет, как типы данных могут взаимодействовать друг с другом в .NET, обеспечивая совместимость между языками.

Тип System.Object определяет основные аспекты поведения объектов, включая методы для сравнения, получения хеш-кода и преобразования в строку.

В mscorlib.dll содержатся основные классы и типы данных, используемые в .NET, такие как примитивные типы, коллекции и классы для работы с исключениями.

Сборка — это единица развертывания и версии в .NET. Она может состоять из одного или нескольких файлов (например, .dll или .exe) и содержит манифест сборки, который описывает её метаданные.

Существуют два основных типа сборок: частные (private) и общие (shared).

Assembly manifest — это часть сборки, содержащая метаданные, такие как версия, название и список зависимостей.

GAC (Global Assembly Cache) — это хранилище для общих сборок, доступных для всех приложений на машине.

Managed code выполняется в управляемой среде CLR, что обеспечивает автоматическое управление памятью и безопасность. Unmanaged code выполняется непосредственно операционной системой.

Метод Main является точкой входа для приложения и определяет, откуда начинается выполнение программы.

Директива using в C# используется для:

Импорта пространств имен.
Определения области видимости для объектов (например, using для управления ресурсами).
Сборки и пространства имен связаны тем, что сборки могут содержать одно или несколько пространств имен, которые группируют классы и другие типы.

Примитивные типы данных в .NET включают: int, double, char, bool, byte, short, long, float, decimal.

Ссылочные типы — это типы, которые хранят ссылки на объекты в памяти. К ним относятся классы, массивы, строки, интерфейсы.

Типы-значения — это типы, которые хранят значения непосредственно. К ним относятся все примитивные типы и структуры.

Главное отличие: ссылочные типы хранят ссылки на объекты, а значимые типы хранят сами значения.

Упаковка — это преобразование значимого типа в ссылочный, распаковка — обратно.

Разница между int и System.Int32 заключается в том, что int — это алиас для System.Int32. Аналогично, double и System.Double тоже связаны.

Тип dynamic используется для работы с объектами, тип которых неизвестен на этапе компиляции. Он позволяет выполнять операции, которые будут проверяться только во время выполнения.

Главное отличие между var и dynamic: var — это неявно типизированная переменная, которая определяется на этапе компиляции, тогда как dynamic может изменять свой тип в процессе выполнения.

Неявно типизированная переменная — это переменная, для которой тип определяется компилятором на основе присваиваемого значения. Объявляется с использованием ключевого слова var.

Nullable тип позволяет присваивать значения null для типов-значений, что полезно для работы с базами данных или ситуациями, где значение может отсутствовать.

Строковый литерал можно объявить с помощью двойных кавычек: "Пример строки". Со строками можно выполнять такие операции, как конкатенация, сравнение, извлечение подстрок и т.д.

Строки можно задавать и инициализировать различными способами:

Прямое присваивание: string str = "Hello";
Использование String.Format: string str = string.Format("Value: {0}", value);
Интерполяция строк: string str = $"Value: {value}";
У типа String есть множество методов, включая Length, Substring(), IndexOf(), ToLower(), ToUpper(), Replace(), Split(), и многие другие.

Пустая строка — это строка с нулевой длиной "", тогда как null-строка не указывает на объект в памяти. Они имеют разные значения: пустая строка — это валидный объект, а null — отсутствие объекта.

Сравнение строк можно выполнять с помощью методов String.Equals(), String.Compare(), или операторов == и !=.

String — это неизменяемый тип, а StringBuilder — изменяемый. Это означает, что при модификации строк String создаются новые экземпляры, тогда как StringBuilder позволяет изменять строку без создания новых объектов.

Явные преобразования переменных с помощью Convert позволяют безопасно преобразовывать типы. Например, Convert.ToInt32(value) или Convert.ToString(value).

Для выполнения консольного ввода/вывода используются методы Console.WriteLine() для вывода и Console.ReadLine() для ввода.

Примеры массивов:

Одномерный массив: int[] array1 = new int[5];
Двумерный массив: int[,] array2 = new int[3, 4];
Ступенчатый массив (или неравномерный массив) — это массив массивов, где каждый подмассив может иметь разную длину. Например:
csharp
Копировать код
int[][] jaggedArray = new int[3][];
jaggedArray[0] = new int[5];
jaggedArray[1] = new int[3];
jaggedArray[2] = new int[4];
В foreach можно использовать любые коллекции, которые реализуют интерфейс IEnumerable. Пример:
csharp
Копировать код
foreach (var item in myList)
{
    Console.WriteLine(item);
}
Кортеж — это структура, которая позволяет хранить несколько значений разных типов. Используется для группировки данных без создания отдельного класса:
csharp
Копировать код
(int, string) tuple = (1, "Пример");
Локальная функция — это функция, объявленная внутри другой функции. Она доступна только в пределах своей области видимости. Например:
csharp
Копировать код
void OuterFunction()
{
    void InnerFunction() { /* код */ }
    InnerFunction();
}
Блоки checked и unchecked определяют, следует ли проверять переполнение числовых типов. В checked выбрасывается исключение при переполнении, в unchecked — нет.

По умолчанию используется unchecked. Чтобы переопределить это поведение, можно явно использовать блок checked.

Ключевое слово fixed используется для закрепления адреса переменной в памяти, что позволяет работать с указателями на управляемые типы. Особенности использования включают необходимость в использовании внутри блока unsafe и ограничение на использование с управляемыми массивами.